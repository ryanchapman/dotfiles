# set colors depending on what the remote terminal will support
#
# Ryan
# Tue Oct 19 20:42:20 MDT 2010

NUM_COLORS=`tput colors`

# __S () - Sets a variable and exports it.  The value is based on how many 
#          colors the terminal will support
#
#usage: __S "VAR" "noColorValue" "valueIf8ColorTerm" "valueIf256ColorTerm"
#examp: __S "PROMPT" "\u@\h:\w\$" "\E[1;42m\u \$\E[0m" "\E[1;42;242m\u \$\E[0m"
function __S ()
{
	local __SETVAR=$1
	local __VAL_NO_COLOR=$2
	local __VAL_8_COLOR=$3
	local __VAL_256_COLOR=$4

	if [[ $NUM_COLORS -ge 256 ]]; then
		eval $__SETVAR=\"\$__VAL_256_COLOR\"
	elif [[ $NUM_COLORS -ge 8 ]]; then
		eval $__SETVAR=\"\$__VAL_8_COLOR\"
	else
		eval $__SETVAR=\"\$__VAL_NO_COLOR\"
	fi
	export $__SETVAR
}

# __A () - Sets an alias and exports it.  The value is based on how many 
#          colors the terminal will support
#
#usage: __A "VAR" "noColorValue" "valueIf8ColorTerm" "valueIf256ColorTerm"
#examp: __A "ls" "ls --color=none" "ls --color=auto" "ls --color=auto"
function __A ()
{
	local __SETVAR=$1
	local __VAL_NO_COLOR=$2
	local __VAL_8_COLOR=$3
	local __VAL_256_COLOR=$4

	if [[ $NUM_COLORS -ge 256 ]]; then
		eval alias $__SETVAR=\"\$__VAL_256_COLOR\"
	elif [[ $NUM_COLORS -ge 8 ]]; then
		eval alias $__SETVAR=\"\$__VAL_8_COLOR\"
	else
		eval alias $__SETVAR=\"\$__VAL_NO_COLOR\"
	fi
	export $__SETVAR
}

__S "PROMPT2" \
	'\u@\h:\w\$ ' \
	'\E[1;42m\u@\h:\w\$ ' \
	'\E[1;42;142m\u@\h:\w\$ ' 


if [[ $USER == "root" ]]; then
	__S "PS1" \
		"\u@\h:\w \$ " \
		"\e[1;31m\u\e[0m@\h:\w\$ " \
		"\e[38;5;196m\u\e[0m@\h:\w\$ "
fi


#begin blinking
__S "LESS_TERMCAP_mb" \
	"" 				  \
	$'\E[01;31m' 	  \
	$'\E[01;31m'
 

#begin bold
__S "LESS_TERMCAP_md" \
	"" 				  \
	"" \
	$'\E[01;38;5;74m'

#end mode
__S "LESS_TERMCAP_me" \
	""				  \
	$'\E[0m'		  \
	$'\E[0m'

#end standout mode
__S "LESS_TERMCAP_se" \
	""				  \
	$'\E[0m'		  \
	$'\E[0m'

#begin standout-mode - info box
__S "LESS_TERMCAP_so" \
	""				  \
	$'\E[1;7;33m'	  \
	$'\E[1;7;33m'

#end underline
__S "LESS_TERMCAP_ue" \
	""				  \
	$'\E[0m'		  \
	$'\E[0m'

#begin underline
__S "LESS_TERMCAP_us" \
	""				  \
	$'\E[04;38;5;146m'\
	$'\E[04;38;5;146m'

__A "ls" 		 \
	"ls" 		 \
	"ls --color" \
	"ls --color"
			
__S "LS_COLORS"	\
	""			\
	'no=00:fi=00:di=01;34:ln=00;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:' \
	'no=00:fi=00:di=01;34:ln=00;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'

__A "grep"											\
	'grep --color=none' 						\
	'grep --color=always'	\
	'grep --color=always'
			

__S "GREP_COLOR" \
	"" 			 \
	"1;7;33"	 \
	"1;7;33"

# less needs to pass ANSI color control sequences through, which is the -R option
# -X = disable alternate screen, which when enabled will restore the screen as it was before less started
__A "less"	\
	"less -X" \
	"less -RX" \
	"less -RX"
